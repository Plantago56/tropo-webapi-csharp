
using System;
using System.Runtime.Serialization;
using System.Collections;
using Newtonsoft.Json;

namespace TropoCSharp.TropoClasses
{

	/// <summary>
	/// The main tropo class.
	/// </summary>
	public class Tropo
	{
		// An arry list to hold tropo action elements.
		public ArrayList tropo;

        #region Main Tropo class

        /// <summary>
		/// Class constructor.
		/// </summary>
		public Tropo () 
		{
			this.tropo = new ArrayList();
		}
		
		public void ask(int attempts, bool bargein, Choices choices, int minConfidence, string name, bool required, Say say, float timeout)
		{
			Ask ask = new Ask();
			ask.attempts = attempts;
			ask.bargein = bargein;
			ask.choices = choices;
			ask.minConfidence = minConfidence;
			ask.name = name;
			ask.required = required;
			ask.say = say;
			ask.timeout = timeout;
			
			JsonSerializerSettings settings = new JsonSerializerSettings();
			settings.DefaultValueHandling = DefaultValueHandling.Ignore;			
			this.tropo.Add("{ \"ask\":" + JsonConvert.SerializeObject(ask, Formatting.None, settings) + "}");
		}

        public void call(Endpoint to, string from, string network, string channel, bool answerOnMedia, int timeout, Array headers, StartRecording recording)
        {
            Call call = new Call();
            call.to = to;
            call.from = from;
            call.network = network;
            call.channel = channel;
            call.answerOnMedia = answerOnMedia;
            call.timeout = timeout;
            call.headers = headers;
            call.recording = recording;

            JsonSerializerSettings settings = new JsonSerializerSettings();
            settings.DefaultValueHandling = DefaultValueHandling.Ignore;
            this.tropo.Add("{ \"call\":" + JsonConvert.SerializeObject(call, Formatting.None, settings) + "}");

        }

        public void conference(string id, bool mute, string name, bool playTones, bool required, bool terminator)
        {
            Conference conference = new Conference();
            conference.id = id;
            conference.mute = mute;
            conference.name = name;
            conference.playTones = playTones;
            conference.required = required;
            conference.terminator = terminator;

            JsonSerializerSettings settings = new JsonSerializerSettings();
            settings.DefaultValueHandling = DefaultValueHandling.Ignore;
            this.tropo.Add("{ \"conference\":" + JsonConvert.SerializeObject(conference, Formatting.None, settings) + "}");
        }

        public void hangup()
        {
            Hangup hangup = new Hangup();
            this.tropo.Add("{ \"hangup\":" + JsonConvert.SerializeObject(hangup) + "}");
        }

        public void message()
        {
        }

                
        public void on(string @event, string next, Say say)
		{
			On on = new On();
			on.@event = @event;
			on.next = next;
			on.say = say;
			
			JsonSerializerSettings settings = new JsonSerializerSettings();
			settings.DefaultValueHandling = DefaultValueHandling.Ignore;			
			this.tropo.Add("{ \"on\":" + JsonConvert.SerializeObject(on, Formatting.None, settings) + "}");
		}
		
        public void record() 
        {
        }

        public void redirect()
        {
        }

        public void reject()
        {
        }

		public void say(string @value, string @as, string name, bool required)
		{
			Say say = new Say();
			say.@value = @value;
			say.@as = @as;
			say.name = name;
			say.required = required;
			
			this.tropo.Add(say);
		}

        public void startRecording()
        {
        }

        public void stopRecording()
        {
        }

        public void transcription()
        {
        }

        public void transfer()
        {
        }
    }

        #endregion

    #region Tropo Action Classes
	
	public class Ask
	{
		public Choices choices;
		public int attempts;
		public bool bargein;
		public int minConfidence;
		public string name;
		public bool required;
		public Say say;
		public float timeout;
	}

    public class Call
    {
        public Endpoint to;
        public string from;
        public string network;
        public string channel;
        public bool answerOnMedia;
        public int timeout;
        public Array headers;
        public StartRecording recording;
    }

    public class Choices
    {
        public string @value;
        public string mode;
        public string termChar;
    }

    public class Conference
    {
        public string id;
        public bool mute;
        public string name;
        public bool playTones;
        public bool required;
        public bool terminator;
    }

    public class Hangup
    {
    }

    public class Message
    {
        public Say say;
        public string to;
        public bool answerOnMedia;
        public string channel;
        public Endpoint from;
        public string name;
        public string network;
        public bool required;
        public float timeout;
        public string voice;
    }

    public class On
    {
        public string @event;
        public string next;
        public Say say;
    }

    public class Record
    {
        public int attempts;
        public bool bargein;
        public bool beep;
        public Choices choices;
        public string format;
        public float maxSilence;
        public float maxTime;
        public string method;
        public string password;
        public bool required;
        public Say say;
        public float timeout;
        public Transcription transcription;
        public string username;
        public string url; 
    }

    public class Redirect
    {
        public Endpoint to;
        public string name;
        public bool required;
    }

    public class Reject
    {
    }
	
	/// <summary>
	/// When the current session is a voice channel this key will either play a message or an audio file from a URL. 
	/// In the case of an text channel it will send the text back to the user via instant messaging or SMS.
	/// </summary>
	public class Say
	{
        public string @value;
        public string @as;
        public string name;
        public bool required;
	}

    public class StartRecording
    {
        public string format;
        public string method;
        public string url;
        public string username;
        public string password;
    }

    public class StopRecording
    {
    }

    public class Transcription
    {
        public string url;
        public string id;
        public string emailFormat;
    }

    public class Transfer
    {
        public bool answerOnMedia;
        public Choices choices;
        public Endpoint from;
        public On on;
        public int ringRepeat;
        public float timeout;
        public Endpoint to;
    }

    #endregion

    #region Helper Classes

    /// <summary>
    /// A utility class to render a Tropo object as JSON.
    /// </summary>
    public static class TropoJSON
    {
        public static string render(Tropo tropo)
        {
            return JsonConvert.SerializeObject(tropo).Replace("\\", "").Replace("\"{", "{").Replace("}\"", "}");
        }
    }
    
    public class Endpoint
    {
        public string id;
        public string channel;
        public string name = "unknown";
        public string network;
    }

    #endregion

    #region Tropo Result Class

    public class Result
	{
		public Result () 
		{
		}
    }

    #endregion

    #region Tropo Session Class

    public class Session
	{
		public Session () 
		{
		}
    }

    #endregion
}
